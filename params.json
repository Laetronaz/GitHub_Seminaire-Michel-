{"name":"Seminaire Git Hub","tagline":"Seminaire sur Git Hub et Git ","body":"### Avant-propos\r\n\r\n### Introduction \r\n\r\n### Notions couvertes\r\nDans ce séminaire, vous appliquerez les notions de contrôle de sources avec l’aide d’un serveur git distant. L’Apprentissage passera par l’inscription au site GitHub, a la création de répertoire git, la synchronisation des fichiers à travers git, l’envoie d’une nouvelle version d’un répertoire git, la visualiser des statistique des répertoires vous appartenant, la  création et l’utilisation de branches pour un même répertoire et finalement la  création et la gestion  d’une organisation GitHub.\r\n\r\n### Connaissances technologiques pré-requises\r\nPour suivre une partie de ce séminaire une connaissance de linux et des lignes de commandes, plus précisément des distributions basé Debian, est nécessaire pour une partie du séminaire. Il est préférable de connaitre à niveau moyen les concepts du contrôle de sources et/ou avoir utilisé certains de ses logiciels par le passé.Il est aussi nécessaire d’avoir des bases sur le concept d’arborescence des fichiers. \r\n\r\n### Outils technologiques utilisés\r\n* git\r\n* GitHub\r\n* Un navigateur web de votre choix\r\n* Le terminal système\r\n\r\n### Git? (Théorie)\r\n#### Repository\r\n#### Commit\r\n#### Push\r\n#### Merge\r\n#### Branches\r\n#### Checkout\r\n#### Arborescence\r\n\r\n### Laboratoires\r\n#### Laboratoire 01 : Inscription à Git Hub\r\nA la fin de ce laboratoire vous serez propriétaire d’un compte GitHub.\r\n* Rendez- vous sur le site https://github.com/\r\n* Inscription:\r\n+ Sur ce site vous devriez voir un formulaire d’inscription\r\n+ Dans le champ username entrez le nom d’utilisateur sous lequel vous désirez être identifie\r\n+ Dans le champ email entrez votre adresse email (valide)\r\n+  Puis dans le champ password entrez un mot de passe (au minimum 7 caractères avec une lettre et un chiffre)\r\n+  Une fois les 3 champs cochés par un crochet vert appuyé sur le bouton Signup to GitHub\r\n* Choix du plan :\r\n+  Choisissez le plan que vous désirez par défaut le plan a 0$ (dernier de la liste)\r\n+  Cliquez sur le bouton vert Finish Sign up en bas de la page\r\n\r\nFélicitation vous avez maintenant un compte Github!\r\n\r\n\r\n***\r\n\r\n#### Laboratoire 02 : Installation du/des logiciels\r\n***\r\n#### Laboratoire 03 : Mise en place du premier répertoire\r\n***\r\n#### Laboratoire 04 : Prise en main du répertoire\r\n#####Pour Windows avec application Git Hub :\r\nCréer un répertoire à partir de fichiers courants\r\n* Cliquer sur +\r\n* Choisissez Create entrez un nom et choisissez le répertoire dans votre arborescence\r\n* Pour l’envoyer sur GitHub cliquer sur Publish Repository en haut à droite\r\nPour créer ou modifier un fichier et le PUSH a votre projet GitHub\r\n* Allez dans le repertoire cloner dans votre arborescence\r\n* Créez un fichier example : new_or_existing_file.extention\r\n* Cliquer droit sur le répertoire et sélectioner l’option git Gui\r\n* Vous verrez une liste des modifications de votre répertoire\r\n* Cliquer sur State Change pour accepter les changements\r\n* Écriver un message de Commit example username : La modification\r\n* A partir d’ici 2 solution sont possible simplement cliquer sur Push et entrez les informations du compte GitHub ou aller sur l’interface GitHub client et cliquer sur Sync en haut à droite.\r\n\r\nPour synchroniser les informations de la BRANCH  et PULLER tous les nouveau changements \r\n* Aller sur github.com et cliquer sur le nouveau fichier ajouter puis sur le symbole de crayon afin d’éditer le fichier à partir de l’interface web.\r\n* Rajouter du texte et en bas de page ajouter un message de commit et optionnellement une description\r\n* Choisissez commit directly sur master branch et cliquer sur le bouton vert Commits changes\r\n* Retourner sur le client de GitHub, vous verrez un symbole apparaitre sur le bouton sync, cliquer dessus.\r\nVoir tous les changements de la version locale\r\n* cliquer droit et choisissez git gui tous les changements non enregistré apparaitront dans la partie du haut\r\nVoir toutes les activités sur repertoire GitHub\r\n* Accéder à votre Compte GitHub et cliquer sur le nom de votre répertoire\r\n* Cliquer sur le mot commits en haut de la page il vous permettra de sélectionner les commits et de voir toutes les modifications apportés lors de ceux-ci.\r\n\r\n\r\n\r\n\r\n#####Pour Ubuntu avec Git :\r\n* Note : Pour transformer un répertoire existant en répertoire git il suffit de faire git init une fois à l’intérieur du répertoire\r\nPour créer ou modifier un fichier et le PUSH a votre projet GitHub\r\n* Entrez dans le répertoire git cd nomdurépertoire (TRÈS IMPORTANT!!!)\r\n* Créer un fichier : ``` touch new_or_existing_file.extention (remplacer extention par l’Extention que vous voulez) ```\r\n\r\n```\r\ngit add new_or_existing_file.extention \r\ngit commit\r\ngit push origin master\r\n```\r\n\r\nPour synchroniser les informations de la BRANCH  et PULLER tous les nouveau changements \r\n* Aller sur github.com et cliquer sur le nouveau fichier ajouter puis sur le symbole de crayon afin d’éditer le fichier à partir de l’interface web.\r\n* Rajouter du texte et en bas de page ajouter un message de commit et optionnellement une description\r\n* Choisisez commit directly sur master branch et cliquer sur le bouton vert Commits changes\r\n```\r\ngit fetch\r\ngit merge origin/master\r\n```\r\n* Visualiser toutes les requetes FETCH et PULL à distance que vous avez demandé\r\n``` git remote –v ```\r\n* Voir les changements récents\r\n``` git status ```\r\n* Visualiser tous les changements sur votre FORK\r\n``` git log ```\r\n* Une liste détaillée de tous les changements qui ont été commits sur votre FORK\r\n``` git log –stat ```\r\n* Une liste des changements avec couleurs\r\n``` git log --graph --full-history --all --color --pretty=format:\"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s\" ```\r\n\r\n\r\n\r\n\r\n\r\n***\r\n#### Laboratoire 05 : Utiliser les branches\r\n##### Pour Windows :\r\nVisualiser les branches disponibles pour le répertoire git\r\n* Sur la page GitHub le bouton branch :\r\n* Sur l’application GitHub quand un répertoire est sélectionné le bouton texte en haut de l’historique.\r\n* Avec Git clic droit sur le répertoire et option branch\r\n* Sur Git Gui dans branch et Checkout\r\n\r\nCréer une nouvelle branche et l’envoyer à GitHub\r\n* Sur GitHub directement et synchroniser les informations (bouton sync)\r\n* Sur l’application Git sur le bouton text branch et faire publish\r\n* Avec Git Gui Branch Create et remplir les champs nécessaire, puis faire un push (façon plus optimale)\r\nVisualiser de nouveau vos branches\r\n\r\nChanger de branche  (Checkout)\r\n* Par l’interface GitHub en haut de la page\r\n* En cliquant droit avec  Git et choisissant la branche sur le répertoire\r\n\r\nModifier localement votre branche et sauvegarder les changements\r\n* Supprimer un fichier d’une des branches  \r\n* Faire un push comme appris dans le Lab03\r\n\r\nSi un update est nécessaire sur une branche\r\n* On peut synchroniser avec l’Application client\r\n* Git Gui cliquer sur remote puis fetch from et finalement origin.\r\n\r\nSupprimer une branche en local\r\n* A partir de Git Gui dans branch delete selectionner la branche et cliquez sur delete\r\n* Sur l’application client de GitHub cliquer sur les branches et cliquez sur manage, puis cliquer sur la poubelle sur la branche que vous désirez supprimer.\r\n\r\nSupprimer une branche sur gitHub\r\n* Si vous avez utilisé Git Gui il suffit de faire un nouveau push.\r\n* Si vous avez utilisé GitHub il suffit de faire Sync\r\n* Si vous n’avez encore rien faire vous pouvez utiliser l’interface web pour supprimer la branche sur GitHub directement. Dans le répertoire branches puis all branches.\r\n\r\n##### Pour Ubuntu\r\nVisualiser les branches disponibles pour le projet\r\n```\r\ngit branch\r\n```\r\n* Vous ne devriez voir qu’une seule branche\r\n\r\nCréer une nouvelle branche et l’envoyer à GitHub\r\n```\r\ngit checkout –b nomdevotrenouvellebranche\r\ngit push origin nomdevotrenouvellebranche\r\n```\r\n\r\nVisualiser de nouveau les branches disponibles\r\n* git branch\r\n* une seconde branche devrait être disponible\r\n\r\nPUSH les changements de vos commits dans votre branche\r\n* git push origin nomdevotrebranche\r\n* Mettre à jours votre branche à partir du dépôt Github\r\n* Modifier à partir de l’interface web la nouvelle branche sélectionner votre nouvelle branche et supprimer le fichier créer précédemment. (cliquer dessus puis cliquer sur le symbole de poubelle)\r\n```\r\ngit fetch \r\ngit merge origin/nomvotrebranche\r\n```\r\n\r\nChanger de branche\r\n```\r\ngit checkout master\r\n```\r\n\r\nSupprimer une branche\r\n```\r\n$ git branch –D nomdevotrebranche\r\n$ git push origin :nomdevotrebranche\r\n```\r\n***\r\n\r\n#### Laboratoire 06 : Les organisations (Optionnel)\r\nDurant ce laboratoire vous apprendrez comment créer et gérer les diverses aspects d’une organisation sur GitHub. Une fois ce laboratoire terminé, vous serez en mesure de créer des répertoires, gérer les membres d’une organisation, gérer des groupes et les permissions de ceux-ci. \r\n***\r\n\r\nCréer une organisation\r\n* Allez sur votre GitHub cliquez sur le + et cliquer new organisation\r\n* Entrez un nom et un email\r\n* Sélectionner l’option Open Source\r\n* Cliquez create puis organization\r\n\r\nInviter des membres\r\n* Cliquez  haut à droite de la page de l’organisation sur le bouton invite someone\r\n* Entrez le nom  d’utilisateur de la personne\r\n* Sélectionnez le groupe auquel il appartiendra\r\n\r\nCréer et gérer une équipe\r\n* Cliquer à droite dans le menu Team sur Create a new Team\r\n* Entrez le nom et la description de l’équipe puis choisissez les accès Read, Write ou Admin\r\n* Cliquez sur Create Team\r\n\r\nCréer un répertoire\r\n* Cliquez sur New Repository sur la page de  l’organisation\r\n* Entrez un nom et une description\r\n* Cocher une visibilité\r\n* Ajouter une licence MIT (juste au cas)\r\n* Cliquez sur create repository\r\n\r\nAffecter un répertoire a un groupe\r\n* Cliquez sur le groupe en question\r\n* Cliquez sur repositories\r\n* Dans la barre de recherche add Repositories entrez le nom du répertoire\r\n* Entrez votre mot de passe dans le pop-up\r\n\r\n***\r\n### Conclusion\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}